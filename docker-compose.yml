version: '2.1'

services:
  traefik:
    image: traefik:v1.7 # The official Traefik docker image
    command:
      - --configFile=/traefik.toml    # Tells the container where the traefik config file is located
      - --docker                      # Tells Traefik to listen to docker
    networks:
      - web
    ports:
      - "80:80"                       # The HTTP port
      - "443:443"                     # The HTTPS port
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Mounts the traefik.toml file found in the VM to the container
      - /var/traefik/traefik.toml:/traefik.toml
      # Mounts the acme.json file found in the VM to the container
      - /var/traefik/acme.json:/acme.json
    restart: unless-stopped

  # add dockerised challenges services

  # WEB CHALLENGES

  # XXE Challenge
  master-yoda:
    build: ./Challenges/Technical/master-yoda
    restart: unless-stopped
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:master-yoda.ctf.secso.cc"
      - "traefik.port=5000"
      - "traefik.docker.network=web"

  # SSRF Challenge
  hyperdome:
    build:
      context: ./Challenges/Technical/SSRF/app
    restart: unless-stopped
    networks:
      - web
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:hyperdome.ctf.secso.cc"
      - "traefik.port=5000"
      - "traefik.docker.network=web"
    depends_on:
      - app2

  app2:
    build:
      context: ./Challenges/Technical/SSRF/app2
    networks:
      - default

  # Rainbow Tables Challenge
  exposed-passwords:
    build: ./Challenges/Technical/basic_rn_attack
    restart: unless-stopped
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:exposed-passwords.ctf.secso.cc"
      - "traefik.port=8000"
      - "traefik.docker.network=web"

  # sandbox:
  #   build: ./Challenges/Technical/sandbox/app
  #   restart: unless-stopped
  #   networks:
  #     - web
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.frontend.rule=Host:sandbox.ctf.secso.cc"
  #     - "traefik.port=4999"
  #     - "traefik.docker.network=web"
  
  # location-finder:
  #   build: ./Challenges/Non-Technical/location-finder/app
  #   restart: unless-stopped
  #   networks:
  #     - web
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.frontend.rule=Host:location-finder.ctf.secso.cc"
  #     - "traefik.port=4999"
  #     - "traefik.docker.network=web"

  notecloak:
    build: ./Challenges/Technical/ctf_challenge
    restart: unless-stopped
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:notecloak.ctf.secso.cc"
      - "traefik.port=4000"
      - "traefik.docker.network=web"

  dini-bread-shop:
    build: ./Challenges/Technical/dini_bread_shop
    restart: unless-stopped
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:dini-bread-shop.ctf.secso.cc"
      - "traefik.port=3000"
      - "traefik.docker.network=web"

  # BINARY CHALLENGES

  rop-binex:
    build: ./Challenges/Technical/rop-binex
    restart: unless-stopped
    ports:
      - "5000:9999"
    networks:
      - binary
    labels:
      - "traefik.enable=false"

  shell-binex:
    build: ./Challenges/Technical/shellcode-binex
    restart: unless-stopped
    ports:
      - "5001:9999"
    networks:
      - binary
    labels:
      - "traefik.enable=false"

networks:
  web:
    external: true
  binary:
    external: true
  default:
    driver: bridge